# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-02-19 16:19
from __future__ import unicode_literals

import apps.administrador.models
import apps.administrador.validaciones
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AreaConocimiento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe un tipo con este nombre'}, max_length=30, unique=True, verbose_name='Area de conocimiento')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Area de conocimiento',
                'verbose_name_plural': 'Areas de conocimiento',
            },
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion', models.TextField(help_text='Este campo hace referencia a una peque\xf1a descripci\xf3n corta de audio que se esta cargando en el sistema.', verbose_name='Descripcion')),
                ('ruta', models.FileField(help_text='Este campo permite adjuntar un archivo el cual se cargara en el sistema.', upload_to=apps.administrador.models.audio)),
                ('activo', models.BooleanField(default=True)),
                ('eliminado', models.BooleanField(default=False)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
                ('autor', models.ManyToManyField(blank=True, help_text='Esta lista de selecci\xf3n multiple le permitira referenciar a todos los colaboradores del documento.', related_name='Actor_audio', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('fecha',),
                'verbose_name': 'Audio',
                'verbose_name_plural': 'Audios',
            },
        ),
        migrations.CreateModel(
            name='AudioVisto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contador', models.IntegerField()),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Audio')),
            ],
        ),
        migrations.CreateModel(
            name='AudioVisualizacion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Carrera',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe una carrera con este nombre'}, max_length=25, unique=True, verbose_name='Carrera')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Carrera',
            },
        ),
        migrations.CreateModel(
            name='Clase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe una clase con este nombre'}, max_length=30, unique=True, verbose_name='Clase de documento')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Clase',
            },
        ),
        migrations.CreateModel(
            name='Clave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe una clave con este nombre'}, max_length=30, unique=True, verbose_name='Palabra clave')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Clave',
                'verbose_name_plural': 'Claves',
            },
        ),
        migrations.CreateModel(
            name='Dominio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=35, unique=True)),
                ('activo', models.BooleanField(default=False)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('fecha',),
                'verbose_name': 'Dominio',
                'verbose_name_plural': 'Dominios',
            },
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe un evento con este nombre'}, max_length=45, unique=True, verbose_name='Evento')),
                ('cronograma', models.FileField(upload_to=apps.administrador.models.cronograma)),
                ('inicio', models.DateField()),
                ('fin', models.DateField()),
                ('activo', models.BooleanField(default=False)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
                ('colaboradores', models.ManyToManyField(related_name='Colaboradores_evento', to=settings.AUTH_USER_MODEL)),
                ('encargado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Evento',
            },
        ),
        migrations.CreateModel(
            name='Facultad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe una facultad con este nombre'}, max_length=25, unique=True, verbose_name='Facultad')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Facultad',
            },
        ),
        migrations.CreateModel(
            name='Imagen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(blank=True, help_text='Este campo hace referencia a nombre de la imagen.', max_length=50)),
                ('ruta', models.FileField(help_text='Esta lista de opcines le permite asignar una carrera de enfoque a la imagen.', upload_to=apps.administrador.models.imagen)),
                ('descripcion', models.TextField(help_text='Este campo le permite agregar una peque\xf1a descripci\xf3n a la imagen que se esta cargando.')),
                ('activo', models.BooleanField(default=True)),
                ('eliminado', models.BooleanField(default=False)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
                ('autor', models.ManyToManyField(blank=True, help_text='Esta lista de opcion multiple le permite relacionar multiples colaboradores a la imagen.', related_name='Autor_imagen', to=settings.AUTH_USER_MODEL)),
                ('carrera', models.ForeignKey(help_text='Esta lista de opciones le permite relacionar las carreras a las cuales ', on_delete=django.db.models.deletion.CASCADE, to='administrador.Carrera')),
                ('clase', models.ForeignKey(help_text='Esta lista de selecci\xf3n le permite clasificar el documento.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Clase')),
                ('clave', models.ManyToManyField(help_text='Esta lista de selecci\xf3n multiple le permite enriqueser la referenciaci\xf3n del documento.', to='administrador.Clave')),
                ('evento', models.ForeignKey(blank=True, help_text='Esta lista de selecci\xf3n hace referencia al evento que pertenece el documento si es que aplica.', null=True, on_delete=django.db.models.deletion.CASCADE, to='administrador.Evento')),
                ('propietario', models.ForeignKey(help_text='Esta lista de opciones le permite referenciar un suaurio propietario de la imagen.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('fecha',),
                'verbose_name': 'Imagen',
                'verbose_name_plural': 'Imagenes',
            },
        ),
        migrations.CreateModel(
            name='Orador',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombres', models.CharField(max_length=45)),
                ('apellidos', models.CharField(max_length=45)),
                ('documento', models.FileField(upload_to=apps.administrador.models.foto)),
                ('hv', models.FileField(upload_to=apps.administrador.models.hv, validators=[apps.administrador.models.pdf])),
                ('llegada', models.DateField()),
                ('despedida', models.DateField()),
                ('conocimiento', models.ManyToManyField(to='administrador.AreaConocimiento')),
            ],
            options={
                'ordering': ('nombres', 'apellidos'),
                'verbose_name': 'Orador',
                'verbose_name_plural': 'Oradores',
            },
        ),
        migrations.CreateModel(
            name='Pdf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Este campo hace referencia al nombre que identific el documento.', max_length=45, unique=True)),
                ('descripcion', models.TextField(help_text='Este campo hace referencia a un texto descriptivo que realice una peque\xf1a introducci\xf3n al documento.', verbose_name='Descripcion')),
                ('ruta', models.FileField(help_text='Este campo permite seleccionar un archivo pdf dentro de nuestro ordenador.', upload_to=apps.administrador.models.pdf, validators=[apps.administrador.validaciones.validate_even])),
                ('descargable', models.BooleanField(default=False, help_text='Este boton seleccionable le permite al usuario definir si el documento cargado puede ser descargado una vez sea publicado.')),
                ('activo', models.BooleanField(default=True)),
                ('eliminado', models.BooleanField(default=False)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('fecha',),
                'verbose_name': 'Pdf',
                'verbose_name_plural': "Pdf's",
            },
        ),
        migrations.CreateModel(
            name='PdfVisto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contador', models.IntegerField()),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Pdf')),
            ],
        ),
        migrations.CreateModel(
            name='PdfVisualizacion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Perfil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.FileField(blank=True, null=True, upload_to=apps.administrador.models.avatar)),
                ('codigo', models.CharField(blank=True, max_length=15, null=True, verbose_name='Numero de codigo')),
                ('activation_key', models.CharField(max_length=40)),
                ('key_expires', models.DateTimeField()),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
                ('carrera', models.ManyToManyField(blank=True, to='administrador.Carrera')),
            ],
            options={
                'ordering': ('usuario',),
                'verbose_name': 'Perfil',
                'verbose_name_plural': 'Perfiles',
            },
        ),
        migrations.CreateModel(
            name='Sede',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe una sede con este nombre'}, max_length=45, unique=True, verbose_name='Unidad administrativa')),
                ('pais', models.CharField(max_length=35, verbose_name='Pais')),
                ('ciudad', models.CharField(max_length=45, verbose_name='Ciudad')),
                ('direccion', models.CharField(max_length=45, verbose_name='Direccion')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Sede',
            },
        ),
        migrations.CreateModel(
            name='Tarea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('fecha', models.DateTimeField(default=datetime.datetime.now)),
                ('prioridad', models.IntegerField(choices=[(1, 'Baja'), (2, 'Normal'), (3, 'Alta')], default=2)),
                ('hecho', models.BooleanField(default=False)),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Evento')),
            ],
            options={
                'ordering': ['-prioridad', 'nombre'],
                'verbose_name': 'Tarea',
                'verbose_name_plural': 'Tareas',
            },
        ),
        migrations.CreateModel(
            name='Tematica',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe una tematica con este nombre'}, max_length=30, unique=True, verbose_name='Tematica')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Tematica',
                'verbose_name_plural': 'Tematicas',
            },
        ),
        migrations.CreateModel(
            name='Texto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe un texto con este nombre'}, help_text='Este campo hace referencia al nombre del texto que se esta creando.', max_length=45, unique=True, verbose_name='Texto')),
                ('texto', models.TextField(help_text='Es esta parte del formulario puede escribir el contenido del texto a crear.', verbose_name='Resumen del documento')),
                ('activo', models.BooleanField(default=True)),
                ('eliminado', models.BooleanField(default=False)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
                ('carrera', models.ForeignKey(help_text='Esta lista de selecci\xf3n le permitira relacionar la carrera de enfoque del documento.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Carrera')),
                ('clase', models.ForeignKey(help_text='Esta lista de selecci\xf3n le permite clasificar el documento.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Clase')),
                ('clave', models.ManyToManyField(help_text='Esta lista de selecci\xf3n multiple le permite enriqueser la referenciaci\xf3n del documento.', to='administrador.Clave')),
                ('colaborador', models.ManyToManyField(blank=True, help_text='Esta lista de selecci\xf3n multiple le permitira referenciar a todos los colaboradores del documento.', related_name='Colaborador', to='administrador.Perfil')),
                ('evento', models.ForeignKey(blank=True, help_text='Esta lista de selecci\xf3n hace referencia al evento que pertenece el documento si es que aplica.', null=True, on_delete=django.db.models.deletion.CASCADE, to='administrador.Evento')),
                ('propietario', models.ForeignKey(help_text='Este campo hac referencia al due\xf1o o propietario del texto.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tematica', models.ManyToManyField(help_text='Esta lista de selecci\xf3n multiple le permite asignar multiples tematicas referentes al testo.', to='administrador.Tematica')),
            ],
            options={
                'ordering': ('fecha',),
                'verbose_name': 'Texto',
                'verbose_name_plural': 'Textos',
            },
        ),
        migrations.CreateModel(
            name='TextoVisto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contador', models.IntegerField()),
                ('texto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Texto')),
            ],
        ),
        migrations.CreateModel(
            name='TextoVisualizacion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tipo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe un tipo con este nombre'}, max_length=30, unique=True, verbose_name='Tipo de documento')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Tipo',
            },
        ),
        migrations.CreateModel(
            name='TipoEvento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe un tipo con este nombre'}, max_length=30, unique=True, verbose_name='Tipo de documento')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Tipo de evento',
                'verbose_name_plural': 'Tipos de eventos',
            },
        ),
        migrations.CreateModel(
            name='TipoOrador',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(error_messages={'unique': 'Ya existe un tipo con este nombre'}, max_length=30, unique=True, verbose_name='Tipo de orador')),
                ('activo', models.BooleanField(default=True)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('nombre',),
                'verbose_name': 'Tipo de orador',
                'verbose_name_plural': 'Tipos de oradores',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion', models.TextField(help_text='Este campo hace referencia a una breve descripci\xf3n del contenido del video.', verbose_name='Descripcion')),
                ('ruta', models.FileField(help_text='En este campo puede cargar el video que se subira a la plataforma.', upload_to=apps.administrador.models.video)),
                ('activo', models.BooleanField(default=True)),
                ('eliminado', models.BooleanField(default=False)),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
                ('autor', models.ManyToManyField(blank=True, help_text='Esta lista de seleccion multiple hace referencia a los colaboradores que tuvier\xf3n participaci\xf3n el el video.', related_name='Actor_video', to='administrador.Perfil')),
                ('carrera', models.ForeignKey(help_text='Esta lista de opciones le permite darle una carrera enfoque al video.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Carrera')),
                ('clase', models.ForeignKey(help_text='Esta lista de opciones le permite clasificar el video.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Clase')),
                ('clave', models.ManyToManyField(help_text='Esta lista de selecci\xf3n multiple le permitia enriqueser los metadatos del video.', to='administrador.Clave')),
                ('evento', models.ForeignKey(blank=True, help_text='Esta lista de selecci\xf3n hace referencia al evento que pertenece el documento si es que aplica.', null=True, on_delete=django.db.models.deletion.CASCADE, to='administrador.Evento')),
                ('propietario', models.ForeignKey(help_text='Esta lista de selecci\xf3n hace referencia a propietario due\xf1o del video.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tematica', models.ManyToManyField(help_text='Esta lista de selecci\xf3n multiple le permite asignar multiples tematicas al video.', to='administrador.Tematica')),
                ('tipo', models.ForeignKey(help_text='Esta lista de selecci\xf3n le permite tipificar el video,', on_delete=django.db.models.deletion.CASCADE, to='administrador.Tipo')),
            ],
            options={
                'ordering': ('fecha',),
                'verbose_name': 'Video',
                'verbose_name_plural': 'Videos',
            },
        ),
        migrations.CreateModel(
            name='VideoVisto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contador', models.IntegerField()),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Video')),
            ],
        ),
        migrations.CreateModel(
            name='VideoVisualizacion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='texto',
            name='tipo',
            field=models.ForeignKey(help_text='Esta lista de selecci\xf3n le permite tipoficar el documento.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Tipo'),
        ),
        migrations.AddField(
            model_name='perfil',
            name='sede',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='administrador.Sede'),
        ),
        migrations.AddField(
            model_name='perfil',
            name='usuario',
            field=models.OneToOneField(blank=True, error_messages={'unique': 'Ya existe un usuario con este nombre'}, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pdf',
            name='autor',
            field=models.ManyToManyField(blank=True, help_text='Esta lista de selecci\xf3n hace referencia a los colaboradores del documento pero que no son el propietario directo.', related_name='Actor_pdf', to='administrador.Perfil'),
        ),
        migrations.AddField(
            model_name='pdf',
            name='carrera',
            field=models.ForeignKey(help_text='Esta lista de seleccion hace referencia a la carrera de enfoque que tiene el documento que se va a crear.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Carrera'),
        ),
        migrations.AddField(
            model_name='pdf',
            name='clase',
            field=models.ForeignKey(help_text='Esta lista de selecci\xf3n le permite clasificar el documento.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Clase'),
        ),
        migrations.AddField(
            model_name='pdf',
            name='clave',
            field=models.ManyToManyField(help_text='Esta lista de selecci\xf3n multiple le permite enriqueser la referenciaci\xf3n del documento.', to='administrador.Clave'),
        ),
        migrations.AddField(
            model_name='pdf',
            name='evento',
            field=models.ForeignKey(blank=True, help_text='Esta lista de selecci\xf3n hace referencia al evento que pertenece el documento si es que aplica.', null=True, on_delete=django.db.models.deletion.CASCADE, to='administrador.Evento'),
        ),
        migrations.AddField(
            model_name='pdf',
            name='propietario',
            field=models.ForeignKey(help_text='Esta lista de selecci\xf3n hace referencia al propietario o due\xf1o del archivo a crear.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pdf',
            name='tematica',
            field=models.ManyToManyField(help_text='Esta lista de selecci\xf3n multiple le permite asignar multiples tematicas referentes al testo.', to='administrador.Tematica'),
        ),
        migrations.AddField(
            model_name='pdf',
            name='tipo',
            field=models.ForeignKey(help_text='Esta lista de selecci\xf3n le permite tipoficar el documento.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Tipo'),
        ),
        migrations.AddField(
            model_name='imagen',
            name='tematica',
            field=models.ManyToManyField(help_text='Esta lista de selecci\xf3n multiple le permite asignar multiples tematicas referentes al testo.', to='administrador.Tematica'),
        ),
        migrations.AddField(
            model_name='imagen',
            name='tipo',
            field=models.ForeignKey(help_text='Esta lista de selecci\xf3n le permite tipoficar el documento.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Tipo'),
        ),
        migrations.AddField(
            model_name='evento',
            name='tipo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.TipoEvento'),
        ),
        migrations.AddField(
            model_name='carrera',
            name='facultad',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Facultad'),
        ),
        migrations.AddField(
            model_name='audio',
            name='carrera',
            field=models.ForeignKey(help_text='Esta lista de opcines le permite asignar una carrera de enfoque al audio.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Carrera'),
        ),
        migrations.AddField(
            model_name='audio',
            name='clase',
            field=models.ForeignKey(help_text='Esta lista le permite clasificar el audio que se esta cargando.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Clase'),
        ),
        migrations.AddField(
            model_name='audio',
            name='clave',
            field=models.ManyToManyField(help_text='Esta lista de opcion multiple le permite enriqueser el audio que se esta cargando.', to='administrador.Clave'),
        ),
        migrations.AddField(
            model_name='audio',
            name='evento',
            field=models.ForeignKey(blank=True, help_text='Esta lista de selecci\xf3n hace referencia al evento que pertenece el documento si es que aplica.', null=True, on_delete=django.db.models.deletion.CASCADE, to='administrador.Evento'),
        ),
        migrations.AddField(
            model_name='audio',
            name='propietario',
            field=models.ForeignKey(help_text='Este campo hac referencia al due\xf1o o propietario del texto.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='audio',
            name='tematica',
            field=models.ManyToManyField(help_text='Esta lista de opcion multiple le permite asignarle diversas tematicas al audio que se esta cargando.', to='administrador.Tematica'),
        ),
        migrations.AddField(
            model_name='audio',
            name='tipo',
            field=models.ForeignKey(help_text='Esta lista le permite tipificar el audio que se esta cargando.', on_delete=django.db.models.deletion.CASCADE, to='administrador.Tipo'),
        ),
    ]
